;THIS IS A CIRCUIT THAT WILL CONTROL THE TURNING ON AND OFF OF INDUSTRIAL ELECTRICAL EQUIPMENT VIA RESPONSE FROM SWITCHES
;AT START, THE USER WILL BE PROMPTED TO SET THE TIME ON AND TIME OFF OF THE LOADS AS WELL AS THE TIME OF THE DAY.
;THE CIRCUIT WILL PICK UP AND RESPOND APPRIOPRIATELY. 
;THIS TIME ON AND OFF AS WELL AS THE TIME OF THE DAY, CAN BE EDITED ANYTIME BY THE USER.

;DECLARATIONS FOR SIMULATION
;LCD_PORT		EQU	P2
;RS_BIT			EQU	P3.5
;RW_BIT			EQU	P3.6
;EN_BIT			EQU	P3.7

;LOAD1			EQU	P1.0
;LOAD2			EQU	P1.1
;LOAD3			EQU	P1.2
;LOAD4			EQU	P1.3
;STAT_LED		EQU	P1.4

;YES_UP			EQU	P0.0
;NO_DOWN		EQU	P0.1
;ENTER			EQU	P0.2
			
;DECLARATIONS FOR real life
LCD_PORT		EQU	P2
RS_BIT			EQU	P3.4
RW_BIT			EQU	P3.6
EN_BIT			EQU	P3.5

LOAD1			EQU	P0.3
LOAD2			EQU	P0.2
LOAD3			EQU	P0.1
LOAD4			EQU	P0.0
STAT_LED		EQU	P0.5

YES_UP			EQU	P1.5
NO_DOWN			EQU	P1.4
ENTER			EQU	P1.3


LOAD1_ON_HR		EQU	40H			;THESE ARE WHERE THE SET VALUES OF ON AND OFF TIME ARE STORED. COLLECTED FROM PHONE
LOAD1_OFF_HR		EQU	41H
LOAD1_ON_MIN		EQU	42H
LOAD1_OFF_MIN		EQU	43H

LOAD2_ON_HR		EQU	44H
LOAD2_OFF_HR		EQU	45H
LOAD2_ON_MIN		EQU	46H
LOAD2_OFF_MIN		EQU	47H

LOAD3_ON_HR		EQU	48H
LOAD3_OFF_HR		EQU	49H
LOAD3_ON_MIN		EQU	4AH
LOAD3_OFF_MIN		EQU	4BH

LOAD4_ON_HR		EQU	4CH
LOAD4_OFF_HR		EQU	4DH
LOAD4_ON_MIN		EQU	4EH
LOAD4_OFF_MIN		EQU	4FH

HOUR			EQU	60H		;COLLECTED TIME FROM PHONE
MINUTE			EQU	61H
SECOND			EQU	62H

LOAD_ON_HR		EQU	63H			;USED TO SET THE STATUS OF THE LOADS		
LOAD_OFF_HR		EQU	64H
LOAD_ON_MIN		EQU	65H
LOAD_OFF_MIN		EQU	66H



HR1			EQU	67H		;for display
HR2			EQU	68H
MIN1			EQU	69H
MIN2			EQU	6AH
SEC1			EQU	6BH
SEC2			EQU	6CH

ADJ			EQU	6DH		;SET THE DURATION OF THE CLOCK

SET_REG			EQU	R6		;REGISTER TO SET TIME
LOAD_STATUS		EQU	6EH		;DETERMINES IF THE LOAD WILL ON OR OFF

		ORG 0000H
		LJMP MAIN
		ORG  000BH
		LJMP INTERUPT
				
		ORG 0030H
		
MAIN:		


;INITIALIZATION

	SETB LOAD1		;TURN OFF ALL THE Loads
	SETB LOAD2
	SETB LOAD3
	SETB LOAD4
	CLR STAT_LED
	
	SETB YES_UP		;MAKE INPUT
	SETB NO_DOWN
	SETB ENTER
	
	MOV ADJ,#18
	
	

;PROGRAM STARTS HERE
	LCALL PROJ1
	LCALL HALF_SEC
	LCALL PROJ2
	LCALL ONE_SEC
REJOIN:	LCALL PROJ3
	LCALL HALF_SEC
	LCALL PROJ4
	SETB STAT_LED
	LCALL LONG_DELAY
	
	
	;TURN ON ALL THE LOADS, THEN TURN EM OFF AGAIN
	CLR LOAD1
	LCALL ONE_SEC
	CLR LOAD2
	LCALL ONE_SEC
	CLR LOAD3
	LCALL ONE_SEC
	CLR LOAD4
	CLR STAT_LED
	LCALL LONG_DELAY
	CLR STAT_LED
	
	SETB LOAD1
	LCALL HALF_SEC
	SETB LOAD2
	LCALL HALF_SEC
	SETB LOAD3
	LCALL HALF_SEC
	SETB LOAD4
	LCALL ONE_SEC
	SETB STAT_LED
	LCALL HALF_SEC
	
	
	
	
	
	
	;set the time off/on of the loads and also the clock		
		MOV SET_REG,#00H		;EMPTY REGISTER FIRST		
		LCALL SET_LOAD1_ON		;DISPLAY SETTING OF ON TIME
		MOV HOUR,#00
		MOV MINUTE,#00
		MOV SECOND,#00
		LCALL CONVERSIONS
		LCALL TIME_DIS
		LCALL SETTING1			;SUBROUTINE TO SET TIME ON/OFF
		MOV LOAD1_ON_HR,HOUR
		MOV LOAD1_ON_MIN,MINUTE
		
		MOV SET_REG,#00H
		LCALL SET_LOAD1_OFF
		MOV HOUR,#00
		MOV MINUTE,#00
		MOV SECOND,#00
		LCALL CONVERSIONS
		LCALL TIME_DIS
		LCALL SETTING1
		MOV LOAD1_OFF_HR,HOUR
		MOV LOAD1_OFF_MIN,MINUTE
		
		;FOR LOAD 2
		MOV SET_REG,#00H				
		LCALL SET_LOAD2_ON
		MOV HOUR,#00
		MOV MINUTE,#00
		MOV SECOND,#00
		LCALL CONVERSIONS
		LCALL TIME_DIS		
		LCALL SETTING1			
		MOV LOAD2_ON_HR,HOUR
		MOV LOAD2_ON_MIN,MINUTE
		
		MOV SET_REG,#00H
		LCALL SET_LOAD2_OFF
		MOV HOUR,#00
		MOV MINUTE,#00
		MOV SECOND,#00
		LCALL CONVERSIONS
		LCALL TIME_DIS
		LCALL SETTING1
		MOV LOAD2_OFF_HR,HOUR
		MOV LOAD2_OFF_MIN,MINUTE
		
		;FOR LOAD 3
		MOV SET_REG,#00H				
		LCALL SET_LOAD3_ON
		MOV HOUR,#00
		MOV MINUTE,#00
		MOV SECOND,#00
		LCALL CONVERSIONS
		LCALL TIME_DIS		
		LCALL SETTING1			
		MOV LOAD3_ON_HR,HOUR
		MOV LOAD3_ON_MIN,MINUTE
		
		MOV SET_REG,#00H
		LCALL SET_LOAD3_OFF
		MOV HOUR,#00
		MOV MINUTE,#00
		MOV SECOND,#00
		LCALL CONVERSIONS
		LCALL TIME_DIS
		LCALL SETTING1
		MOV LOAD3_OFF_HR,HOUR
		MOV LOAD3_OFF_MIN,MINUTE
		
		;FOR LOAD 4
		MOV SET_REG,#00H				
		LCALL SET_LOAD4_ON
		MOV HOUR,#00
		MOV MINUTE,#00
		MOV SECOND,#00
		LCALL CONVERSIONS
		LCALL TIME_DIS		
		LCALL SETTING1			
		MOV LOAD4_ON_HR,HOUR
		MOV LOAD4_ON_MIN,MINUTE
		
		MOV SET_REG,#00H
		LCALL SET_LOAD4_OFF
		MOV HOUR,#00
		MOV MINUTE,#00
		MOV SECOND,#00
		LCALL CONVERSIONS
		LCALL TIME_DIS
		LCALL SETTING1
		MOV LOAD4_OFF_HR,HOUR
		MOV LOAD4_OFF_MIN,MINUTE
		
		
		LCALL RESET_CLOCK			;THIS SETS THE TIME OF THE DAY
		MOV SET_REG,#00H
		MOV HOUR,#00
		MOV MINUTE,#00
		MOV SECOND,#00
		LCALL CONVERSIONS
		LCALL TIME_DIS
		LCALL SETTING1
			
		
		LCALL SETTING_DONE
		LCALL LONG_DELAY
		
DONE:		MOV R2,ADJ		;REPEAT A PROCESS 18 TIMES
		MOV IE,#82H		;ENABLES TIMER0 OVER FLOW INTERUPT
RELOAD:		MOV TMOD,#01H		;SELECT MODE 1 OF TIMER ZERO
		MOV TL0,#0B0H		;LOADS THE TIMER TO BE ABLE TO 
		MOV TH0,#03CH		;MAKE A 50MS DELAY
		SETB TR0
		
		LCALL THE_TIME_IS		

REAL_LOOP:	LCALL LOAD_OPERATION
		JB ENTER,REAL_LOOP
		MOV IE,#00
		CLR TR1
		LCALL SYSTEM_RESET
		LCALL YES_NO
		LCALL ONE_SEC
		
		
IMPLY:		JNB YES_UP,BOLD
		JNB NO_DOWN,CHICKEN
		SJMP IMPLY		

CHICKEN:	LCALL INVALID_COMMAND
		LCALL LONG_DELAY
		SJMP DONE
BOLD:		LJMP REJOIN
		

			

;


;SUBROUTINE STARTS HERE


;SUBROUTINE STARTS HERE

	;PROG TO ACTUALLY USE THE STATUS TO TURN ON OR OFF OF THE LOAS
			
LOAD_OPERATION:		MOV LOAD_ON_HR,LOAD1_ON_HR
			MOV LOAD_ON_MIN,LOAD1_ON_MIN
			MOV LOAD_OFF_HR,LOAD1_OFF_HR
			MOV LOAD_OFF_MIN,LOAD1_OFF_MIN
			LCALL ROUTINE1
			JC ONS1
			SJMP OFFS1
			
ONS1:			CLR LOAD1			;CLR MEANS TURN ON
			SJMP LOAD2_OPERATION
OFFS1:			SETB LOAD1			;SETB IS TURN OFF

LOAD2_OPERATION:	MOV LOAD_ON_HR,LOAD2_ON_HR
			MOV LOAD_ON_MIN,LOAD2_ON_MIN
			MOV LOAD_OFF_HR,LOAD2_OFF_HR
			MOV LOAD_OFF_MIN,LOAD2_OFF_MIN
			LCALL ROUTINE1
			JC ONS2
			SJMP OFFS2
ONS2:			CLR LOAD2
			SJMP LOAD3_OPERATION
OFFS2:			SETB LOAD2

LOAD3_OPERATION:	MOV LOAD_ON_HR,LOAD3_ON_HR
			MOV LOAD_ON_MIN,LOAD3_ON_MIN
			MOV LOAD_OFF_HR,LOAD3_OFF_HR
			MOV LOAD_OFF_MIN,LOAD3_OFF_MIN
			LCALL ROUTINE1
			JC ONS3
			SJMP  OFFS3
ONS3:			CLR LOAD3
			SJMP LOAD4_OPERATION
OFFS3:			SETB LOAD3

LOAD4_OPERATION:	MOV LOAD_ON_HR,LOAD4_ON_HR
			MOV LOAD_ON_MIN,LOAD4_ON_MIN
			MOV LOAD_OFF_HR,LOAD4_OFF_HR
			MOV LOAD_OFF_MIN,LOAD4_OFF_MIN
			LCALL ROUTINE1
			JC ONS4
			SJMP OFFS4
ONS4:			CLR LOAD4
			SJMP LOAD_OPERATION_DONE
OFFS4:			SETB LOAD4


LOAD_OPERATION_DONE:	NOP
			RET
			
	;02:05:53
;subroutine that loads the registrer that will control the turn off an turn on of the load		
ROUTINE1:	MOV A,LOAD_ON_HR				;when its set to 3, and time is 2. load should off
		CJNE A,HOUR,ASK1A
		MOV A,LOAD_ON_MIN
		CJNE A,MINUTE,MIN_CHECK1
		SJMP ON_LOAD
MIN_CHECK1:	JNC OFF_LOAD
		MOV A,LOAD_OFF_HR
		CJNE A,HOUR,ASK1C
		SJMP MIN_CHECK1A
		
ASK1A:		JNC OFF_LOAD
		MOV A,LOAD_OFF_HR				;if its not up to the off time, then load should on. if it is, load should off
		CJNE A,HOUR,ASK1C
MIN_CHECK1A:	MOV A,LOAD_OFF_MIN
		CJNE A,MINUTE,MIN_CHECK2
		SJMP OFF_LOAD
MIN_CHECK2:	JC OFF_LOAD
		SJMP ON_LOAD 
		
ASK1C:		JC OFF_LOAD
		SJMP ON_LOAD 
OFF_LOAD:	CLR CY
		
		SJMP STOPS1				
ON_LOAD:	SETB CY
		SJMP STOPS1

STOPS1:		MOV A,#00H
		MOV LOAD_ON_HR,A
		MOV LOAD_OFF_HR,A
		MOV LOAD_ON_MIN,A
		MOV LOAD_OFF_MIN,A
		NOP
		RET
;on,00:00..off,23:59.....................1:20,1:30,1:35, FOR 2,3,4,5


INTERUPT:	CLR TR0			;STOPS THE TIMER
		CLR TF0			;CLEARS THE OVERFLOW FOR THE TIMER, WAITING FOR THE NEXT ROUND
		DEC R2			;VALUE TO ENSURE ONE SEC COUNT DOWN
		MOV TL0,#0B0H		;RELOADS LOADS THE TIMER TO BE ABLE TO 
		MOV TH0,#03CH		;MAKE A 50MS DELAY
		CJNE R2,#00,EXIT0	;IS IT ONE SEC YET? NO,REPEAT PROCESS,YES,TAKE ACTION
		ACALL OUTS		;CALL UP THE SUBROUTINE TO COUNT (SHOULD REFILL THE R2 REGISTER)
EXIT0:		SETB TR0		;RESTARTS THE TIMER
		RETI
		
			
OUTS:		MOV R3,SECOND
		MOV R4,MINUTE
		MOV R5,HOUR
		CJNE R3,#59,ASK13
ASK13:		JNC RESETS1
		INC R3
		SJMP LOST
RESETS1:	MOV R3,#00				;RESETS THE SECONDS
		CJNE R4,#59,ASK23
ASK23:		JNC RESETS2
		INC R4 
		SJMP LOST
RESETS2:	MOV R4,#00				;RESET THE MINUTES
		CJNE R5,#23,ASK33
ASK33:		JNC RESETS3
		INC R5
		SJMP LOST
RESETS3:	MOV R5,#00				;RESET THE HOUR
LOST:		MOV SECOND,R3
		MOV MINUTE,R4
		MOV HOUR,R5
		MOV R2,ADJ
		CPL STAT_LED
		LCALL CONVERSIONS
		LCALL TIME_DIS
		NOP
		RET
		



SETTING1:	JNB YES_UP,UP_HR		;SETTING THE TIME
		JNB NO_DOWN,LO_HR
		JNB ENTER,DONE1
		SJMP SETTING1
		
UP_HR:		LCALL HALF_SEC
		CJNE SET_REG,#23,GOOD1
		MOV SET_REG,#00
		SJMP READY1
GOOD1:		INC SET_REG
		SJMP READY1
		
LO_HR:		LCALL HALF_SEC
		CJNE SET_REG,#00,GOOD2
		MOV SET_REG,#23
		SJMP READY1
GOOD2:		DEC SET_REG
		SJMP READY1
		
READY1:		MOV HOUR,SET_REG
		LCALL CONVERSIONS
		LCALL TIME_DIS
		SJMP SETTING1
	
DONE1:		CLR STAT_LED
		LCALL ONE_SEC
		SETB STAT_LED		
		
		MOV SET_REG,#00H		;EMPTY REGISTER FIRST		
		LCALL CONVERSIONS
		LCALL TIME_DIS

SETTING2:	JNB YES_UP,UP_MIN		;SETTING THE TIME
		JNB NO_DOWN,LO_MIN
		JNB ENTER,DONE2
		SJMP SETTING2
		
UP_MIN:		LCALL HALF_SEC
		CJNE SET_REG,#59,GOOD1B
		MOV SET_REG,#00
		SJMP READY2
GOOD1B:		INC SET_REG
		SJMP READY2
		
LO_MIN:		LCALL HALF_SEC
		CJNE SET_REG,#00,GOOD2B
		MOV SET_REG,#59
		SJMP READY2
GOOD2B:		DEC SET_REG
		SJMP READY2
		
READY2:		MOV MINUTE,SET_REG
		LCALL CONVERSIONS
		LCALL TIME_DIS
		SJMP SETTING2
	
DONE2:		CLR STAT_LED
		LCALL ONE_SEC
		SETB STAT_LED
		
		NOP
		RET



CONVERSIONS:	MOV A,HOUR
		MOV B,#10
		DIV AB
		MOV HR2,B
		MOV HR1,A
		MOV A,MINUTE
		MOV B,#10
		DIV AB
		MOV MIN2,B
		MOV MIN1,A
		MOV A,SECOND
		MOV B,#10
		DIV AB
		MOV SEC2,B
		MOV SEC1,A
		
		MOV A,HR1
		ORL A,#30H
		MOV HR1,A
		MOV A,HR2
		ORL A,#30H
		MOV HR2,A
		MOV A,MIN1
		ORL A,#30H
		MOV MIN1,A
		MOV A,MIN2
		ORL A,#30H
		MOV MIN2,A
		MOV A,SEC1
		ORL A,#30H
		MOV SEC1,A
		MOV A,SEC2
		ORL A,#30H
		MOV SEC2,A
		NOP
		RET
		
TIME_DIS:		MOV DPTR,#DISCOM		
COM01:			CLR A
			MOVC A,@A+DPTR
			LCALL COMNWRT2			;CALL COMMAND SUBROUTINE
			LCALL SHORT_DELAY		;GIVE THE LCD SOMETIME
			INC DPTR
			JZ DAT01
			SJMP COM01
DAT01:			MOV A,HR1
			LCALL DATAWRT2
			LCALL SHORT_DELAY
			MOV A,HR2
			LCALL DATAWRT2
			LCALL SHORT_DELAY
			MOV A,#':'			
			LCALL DATAWRT2
			LCALL SHORT_DELAY
			
			MOV A,MIN1
			LCALL DATAWRT2
			LCALL SHORT_DELAY
			MOV A,MIN2
			LCALL DATAWRT2
			LCALL SHORT_DELAY
			MOV A,#':'			
			LCALL DATAWRT2
			LCALL SHORT_DELAY
			
			MOV A,SEC1
			LCALL DATAWRT2
			LCALL SHORT_DELAY
			MOV A,SEC2
			LCALL DATAWRT2
			LCALL SHORT_DELAY
						
			NOP
			RET




;DISPLAY SUBS
PROJ1:		MOV DPTR,#UPCOM
C01:		CLR A
		MOVC A,@A+DPTR
		LCALL COMNWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ SEND_DAT01
		SJMP C01
SEND_DAT01:	MOV DPTR,#MYDATA1		;DISPLAYS "  DESIGN AND"
D01:		CLR A
		MOVC A,@A+DPTR
		LCALL DATAWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ EXIT01
		SJMP D01
EXIT01:		NOP
		RET
		
PROJ2:		MOV DPTR,#DOWNCOM
C02:		CLR A
		MOVC A,@A+DPTR
		LCALL COMNWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ SEND_DAT02
		SJMP C02
SEND_DAT02:	MOV DPTR,#MYDATA2		;DISPLAYS "  CONSTRUCTION OF"
D02:		CLR A
		MOVC A,@A+DPTR
		LCALL DATAWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ EXIT02
		SJMP D02
EXIT02:		NOP
		RET
		
PROJ3:		MOV DPTR,#UPCOM
C03:		CLR A
		MOVC A,@A+DPTR
		LCALL COMNWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ SEND_DAT03
		SJMP C03
SEND_DAT03:	MOV DPTR,#MYDATA3		;DISPLAYS " A GSM BASED BABY "
D03:		CLR A
		MOVC A,@A+DPTR
		LCALL DATAWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ EXIT03
		SJMP D03
EXIT03:		NOP
		RET
		
PROJ4:		MOV DPTR,#DOWNCOM
C04:		CLR A
		MOVC A,@A+DPTR
		LCALL COMNWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ SEND_DAT04
		SJMP C04
SEND_DAT04:	MOV DPTR,#MYDATA4		;DISPLAYS "  MONITOR DEVICE"
D04:		CLR A
		MOVC A,@A+DPTR
		LCALL DATAWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ EXIT04
		SJMP D04
EXIT04:		NOP
		RET
		
TIME_IS:	MOV DPTR,#UPCOM
C05:		CLR A
		MOVC A,@A+DPTR
		LCALL COMNWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ SEND_DAT05
		SJMP C05
SEND_DAT05:	MOV DPTR,#MYDATA5		;DISPLAYS "  BY	"
D05:		CLR A
		MOVC A,@A+DPTR
		LCALL DATAWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ EXIT05
		SJMP D05
EXIT05:		NOP
		RET
		
SEE_CLOCK:	MOV DPTR,#DOWNCOM
C06:		CLR A
		MOVC A,@A+DPTR
		LCALL COMNWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ SEND_DAT06
		SJMP C06
SEND_DAT06:	MOV DPTR,#MYDATA6		;DISPLAYS "  ADIYU NNEKA JOY "
D06:		CLR A
		MOVC A,@A+DPTR
		LCALL DATAWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ EXIT06
		SJMP D06
EXIT06:		NOP 
		RET
		
SET_LOAD1_ON:		MOV DPTR,#UPCOM
C07:		CLR A
		MOVC A,@A+DPTR
		LCALL COMNWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ SEND_DAT07
		SJMP C07
SEND_DAT07:	MOV DPTR,#MYDATA7		;DISPLAYS "  MAT NUMBER "
D07:		CLR A
		MOVC A,@A+DPTR
		LCALL DATAWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ EXIT07
		SJMP D07
EXIT07:		NOP
		RET
		
SET_LOAD1_OFF:	MOV DPTR,#UPCOM
C08:		CLR A
		MOVC A,@A+DPTR
		LCALL COMNWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ SEND_DAT08
		SJMP C08
SEND_DAT08:	MOV DPTR,#MYDATA8		;DISPLAYS "  DEPARTMENT OF EEE"
D08:		CLR A
		MOVC A,@A+DPTR
		LCALL DATAWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ EXIT08
		SJMP D08
EXIT08:		NOP
		RET
		
SET_LOAD2_ON:	MOV DPTR,#UPCOM
C09:		CLR A
		MOVC A,@A+DPTR
		LCALL COMNWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ SEND_DAT09
		SJMP C09
SEND_DAT09:	MOV DPTR,#MYDATA9		;DISPLAYS "  UNIBEN "
D09:		CLR A
		MOVC A,@A+DPTR
		LCALL DATAWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ EXIT09
		SJMP D09
EXIT09:		NOP
		RET
		
SET_LOAD2_OFF:	MOV DPTR,#UPCOM
C10:		CLR A
		MOVC A,@A+DPTR
		LCALL COMNWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ SEND_DAT10
		SJMP C10
SEND_DAT10:	MOV DPTR,#MYDATA10		;DISPLAYS "  SCANNING "
D10:		CLR A
		MOVC A,@A+DPTR
		LCALL DATAWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ EXIT10
		SJMP D10
EXIT10:		NOP
		RET
		
SET_LOAD3_ON:	MOV DPTR,#UPCOM
C11:		CLR A
		MOVC A,@A+DPTR
		LCALL COMNWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ SEND_DAT11
		SJMP C11
SEND_DAT11:	MOV DPTR,#MYDATA11		;DISPLAYS "  AREA...."
D11:		CLR A
		MOVC A,@A+DPTR
		LCALL DATAWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ EXIT11
		SJMP D11
EXIT11:		NOP
		RET	
		
SET_LOAD3_OFF:	MOV DPTR,#UPCOM
C12:		CLR A
		MOVC A,@A+DPTR
		LCALL COMNWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ SEND_DAT12
		SJMP C12
SEND_DAT12:	MOV DPTR,#MYDATA12		;DISPLAYS "  AREA.... "
D12:		CLR A
		MOVC A,@A+DPTR
		LCALL DATAWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ EXIT12
		SJMP D12
EXIT12:		NOP
		RET
		
SET_LOAD4_ON:	MOV DPTR,#UPCOM
C13:		CLR A
		MOVC A,@A+DPTR
		LCALL COMNWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ SEND_DAT13
		SJMP C13
SEND_DAT13:	MOV DPTR,#MYDATA13		;DISPLAYS "  SECURED "
D13:		CLR A
		MOVC A,@A+DPTR
		LCALL DATAWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ EXIT13
		SJMP D13
EXIT13:		NOP
		RET
		
SET_LOAD4_OFF:	MOV DPTR,#UPCOM
C14:		CLR A
		MOVC A,@A+DPTR
		LCALL COMNWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ SEND_DAT14
		SJMP C14
SEND_DAT14:	MOV DPTR,#MYDATA14		;DISPLAYS "  INTRUDER "
D14:		CLR A
		MOVC A,@A+DPTR
		LCALL DATAWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ EXIT14
		SJMP D14
EXIT14:		NOP
		RET
		
SETTING_DONE:	MOV DPTR,#UPCOM
C15:		CLR A
		MOVC A,@A+DPTR
		LCALL COMNWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ SEND_DAT15
		SJMP C15
SEND_DAT15:	MOV DPTR,#MYDATA15		;DISPLAYS "  INTRUDER "
D15:		CLR A
		MOVC A,@A+DPTR
		LCALL DATAWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ EXIT15
		SJMP D15
EXIT15:		NOP
		RET
		
THE_TIME_IS:	MOV DPTR,#UPCOM
C16:		CLR A
		MOVC A,@A+DPTR
		LCALL COMNWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ SEND_DAT16
		SJMP C16
SEND_DAT16:	MOV DPTR,#MYDATA16		;DISPLAYS "  INTRUDER "
D16:		CLR A
		MOVC A,@A+DPTR
		LCALL DATAWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ EXIT16
		SJMP D16
EXIT16:		NOP
		RET
		
RESET_CLOCK:	MOV DPTR,#UPCOM
C17:		CLR A
		MOVC A,@A+DPTR
		LCALL COMNWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ SEND_DAT17
		SJMP C17
SEND_DAT17:	MOV DPTR,#MYDATA17		;DISPLAYS "  INTRUDER "
D17:		CLR A
		MOVC A,@A+DPTR
		LCALL DATAWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ EXIT17
		SJMP D17
EXIT17:		NOP
		RET

SYSTEM_RESET:	MOV DPTR,#UPCOM
C18:		CLR A
		MOVC A,@A+DPTR
		LCALL COMNWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ SEND_DAT18
		SJMP C18
SEND_DAT18:	MOV DPTR,#MYDATA18		;DISPLAYS "INTRUDER"
D18:		CLR A
		MOVC A,@A+DPTR
		LCALL DATAWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ EXIT18
		SJMP D18
EXIT18:		NOP
		RET
		
YES_NO:		MOV DPTR,#DOWNCOM
C19:		CLR A
		MOVC A,@A+DPTR
		LCALL COMNWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ SEND_DAT19
		SJMP C19
SEND_DAT19:	MOV DPTR,#MYDATA19		;DISPLAYS "  INTRUDER "
D19:		CLR A
		MOVC A,@A+DPTR
		LCALL DATAWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ EXIT19
		SJMP D19
EXIT19:		NOP
		RET
		
INVALID_COMMAND: MOV DPTR,#UPCOM
C20:		CLR A
		MOVC A,@A+DPTR
		LCALL COMNWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ SEND_DAT20
		SJMP C20
SEND_DAT20:	MOV DPTR,#MYDATA20		;DISPLAYS "  INTRUDER "
D20:		CLR A
		MOVC A,@A+DPTR
		LCALL DATAWRT2
		LCALL SHORT_DELAY
		INC DPTR
		JZ EXIT20
		SJMP D20
EXIT20:		NOP
		RET
		





;ldc commands and lcd data
COMNWRT2:					;SEND COMMAND TO LCD
		MOV LCD_PORT,A			;COPY REG A TO P1
		CLR RS_BIT			;RS=0 FOR COMMAND
		CLR RW_BIT			;R/W= FOR WRITE
		SETB EN_BIT			;E=1 FOR HIGH PULSE
		LCALL SHORT_DELAY		;GIVE LCD SOMETIME
		CLR EN_BIT			;E=0 FOR H-TO-L PULSE
		RET
DATAWRT2:					;WRITE DATA TO LCD
		MOV LCD_PORT,A			;COPY REG A TO PORT 1
		SETB RS_BIT			;RS=1 FOR DATA
		CLR RW_BIT			;R/W=0 FOR WRITE
		SETB EN_BIT			;E=1 FOR HIGH PULSE
		LCALL SHORT_DELAY		;GIVE LCD SOME TIME
		CLR EN_BIT			;E=0 FOR H-TO-L PULSE
		RET

;delay subroutines
LONG_DELAY:	MOV 35H,#20			
BACK3:		MOV 36H,#255			
BACK2:		MOV 37H,#255			
BACK1:		DJNZ 37H,BACK1			
		DJNZ 36H,BACK2
		DJNZ 35H,BACK3
		RET
		
ONE_SEC:	MOV 35H,#10
SEC3X:		MOV 36H,#255			
SEC2X:		MOV 37H,#255			
SEC1X:		DJNZ 37H,SEC1X			
		DJNZ 36H,SEC2X
		DJNZ 35H,SEC3X
		RET
		
HALF_SEC:	MOV 35H,#4
SEC30:		MOV 36H,#255			
SEC20:		MOV 37H,#255			
SEC10:		DJNZ 37H,SEC10			
		DJNZ 36H,SEC20
		DJNZ 35H,SEC30
		RET
			
SHORT_DELAY:	MOV 38H,#255
AGAIN3:		DJNZ 38H,AGAIN3
		RET
		
DELAY:		MOV 35H,#2
SEC30X:		MOV 36H,#255			
SEC20X:		MOV 37H,#255			
SEC10X:		DJNZ 37H,SEC10X			
		DJNZ 36H,SEC20X
		DJNZ 35H,SEC30X
		RET
			







MYDATA1:	DB "   DESIGN AND   ",0
MYDATA2:	DB "CONSTRUCTION OF ",0
MYDATA3:	DB "ELECTRICAL LOADS",0
MYDATA4:	DB "PLANNING SYSTEM ",0
MYDATA5:	DB "    TIME IS     ",0
MYDATA6:	DB "    00:00:00    ",0
MYDATA7:	DB " SET LOAD 1 ON  ",0			
MYDATA8:	DB " SET LOAD 1 OFF ",0			
MYDATA9:	DB " SET LOAD 2 ON  ",0	
MYDATA10:	DB " SET LOAD 2 OFF ",0			
MYDATA11:	DB " SET LOAD 3 ON  ",0			
MYDATA12:	DB " SET LOAD 3 OFF ",0	
MYDATA13:	DB " SET LOAD 4 ON  ",0			
MYDATA14:	DB " SET LOAD 4 OFF ",0			

MYDATA15:	DB "  SETTING DONE  ",0
MYDATA16:	DB "   THE TIME IS  ",0
MYDATA17:	DB "RESET THE CLOCK ",0
MYDATA18:	DB "  SYSTEM RESET? ",0
MYDATA19:	DB "   YES      NO  ",0
MYDATA20:	DB "INVALID COMMAND ",0


UPCOM:		DB 38H,06,0EH,80H,01,0 ;COMMANDS AND NULL
DOWNCOM:	DB 38H,06,0EH,0C0H,0
DISCOM:		DB 38H,06,0CH,0C4H,0

END